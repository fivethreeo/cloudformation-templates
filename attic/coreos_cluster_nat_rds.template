{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "A Gaia cluster based on auto scaling groups",

  "Mappings" : {
      "RegionMap" : {
          "eu-central-1" : {
              "CoreosStableAMI" : "ami-02211b1f",
              "NatAMI": "ami-46073a5b"
          },
          "ap-northeast-1" : {
              "CoreosStableAMI" : "ami-22d27b22",
              "NatAMI": "ami-03cf3903"
          },
          "sa-east-1" : {
              "CoreosStableAMI" : "ami-45a62a58",
              "NatAMI": "ami-fbfa41e6"
          },
          "ap-southeast-2" : {
              "CoreosStableAMI" : "ami-2b2e6911",
              "NatAMI": "ami-e7ee9edd"
          },
          "ap-southeast-1" : {
              "CoreosStableAMI" : "ami-0ef1f15c",
              "NatAMI": "ami-b49dace6"
          },
          "us-east-1" : {
              "CoreosStableAMI" : "ami-6b1cd400",
              "NatAMI": "ami-303b1458"
          },
          "us-west-2" : {
              "CoreosStableAMI" : "ami-f5a5a5c5",
              "NatAMI": "ami-69ae8259"
          },
          "us-west-1" : {
              "CoreosStableAMI" : "ami-bf8477fb",
              "NatAMI": "ami-7da94839"
          },
          "eu-west-1" : {
              "CoreosStableAMI" : "ami-50f4b927",
              "NatAMI": "ami-6975eb1e"
          }
      },
      "SubnetConfig" : {
          "VPC"      : { "CIDR" : "10.10.0.0/16" },
          "Public"   : { "CIDR" : "10.10.0.0/18" },
          "Private01"   : { "CIDR" : "10.10.64.0/18" },
          "Private02" : { "CIDR" : "10.10.128.0/18" },
          "Private03"  : { "CIDR" : "10.10.192.0/18" }
      }
  },

  "Parameters": {
    "EtcdInstanceType" : {
      "Description" : "EC2 HVM instance type (m3.medium, etc).",
      "Type" : "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "g2.2xlarge",
        "g2.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "d2.xlarge",
        "d2.2xlarge",
        "d2.4xlarge",
        "d2.8xlarge"
    ]
    },
    "EtcdClusterSize": {
      "Default": "3",
      "MinValue": "3",
      "MaxValue": "9",
      "Description": "Number of nodes in Etcd cluster (3-9).",
      "Type": "Number"
    },
    "CoreOSClusterSize": {
      "Default": "3",
      "MinValue": "3",
      "MaxValue": "40",
      "Description": "Number of nodes in CoreOS cluster (3-40).",
      "Type": "Number"
    },
    "CoreOSInstanceType" : {
      "Description" : "CoreOS EC2 HVM instance type (m3.medium, etc).",
      "Type" : "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "g2.2xlarge",
        "g2.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "d2.xlarge",
        "d2.2xlarge",
        "d2.4xlarge",
        "d2.8xlarge"
    ]
    },
    "AdvertisedIPAddress": {
      "Description": "Use 'private' if your etcd cluster is within one region or 'public' if it spans regions or cloud providers.",
      "Default": "private",
      "AllowedValues": ["private", "public"],
      "Type": "String"
    },
    "KeyPairName" : {
      "Description" : "The name of an EC2 Key Pair to allow SSH access to etcd cluster",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "AllowSSHFrom" : {
      "Description" : "The net block (CIDR) that SSH is available to.",
      "Type" : "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default" : "0.0.0.0/0",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
    },
    "PrivateZone01": {
      "Description": "ELB availability zone for first private subnet",
      "Type": "AWS::EC2::AvailabilityZone::Name"
    },
    "PrivateZone02": {
      "Description": "ELB availability zone for second private subnet",
      "Type": "AWS::EC2::AvailabilityZone::Name"
    },
    "PrivateZone03": {
      "Description": "ELB availability zone for third private subnet",
      "Type": "AWS::EC2::AvailabilityZone::Name"
    },
    "RDSDBEngine" : {
      "Description" : "RDS database engine.",
      "Default": "postgres",
      "Type" : "String"
    },
    "RDSDBMultiAZDatabase": {
      "Default": "true",
      "Description" : "Create a Multi-AZ MySQL Amazon RDS database instance",
      "Type": "String",
      "AllowedValues" : [ "true", "false" ],
      "ConstraintDescription" : "must be either true or false."
    },
    "RDSDBName" : {
      "Description" : "The name of the RDS instance.",
      "Default": "defaultfornow",
      "Type" : "String"
    },
    "RDSDBAllocatedStorage" : {
      "Description" : "Allocated storage of the RDS instance..",
      "Default": "5",
      "Type" : "Number"
    },
    "RDSDBUsername" : {
      "Description" : "The username of the RDS instance.",
      "Default": "defaultfornow",
      "Type" : "String"
    },
    "RDSDBPassword" : {
      "Description" : "The password of the RDS instance.",
      "Default": "defaultfornow",
      "Type" : "String"
    },
    "RDSDBClass" : {
      "Description" : "RDS EC2 instance type",
      "Default": "db.t1.micro",
      "Type" : "String",
      "AllowedValues" : [
        "db.t1.micro",
        "db.m1.small",
        "db.m3.medium",
        "db.m3.large",
        "db.m3.xlarge",
        "db.m3.2xlarge",
        "db.r3.large",
        "db.r3.xlarge",
        "db.r3.2xlarge",
        "db.r3.4xlarge",
        "db.r3.8xlarge",
        "db.t2.micro",
        "db.t2.small",
        "db.t2.medium",
        "db.t2.large"
      ]
    }
  },

  "Resources": {

    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ]},
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Public" },
          { "Key" : "Name", "Value" : "Gaia VPC" },
          { "Key" : "Group", "Value" : "Gaia" }
        ]
      }
    },

    "PublicSubnet" : {
      "DependsOn" : ["VPC"],
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]},
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Public" },
          { "Key" : "Name", "Value" : "Public Subnet" }
        ]
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "GatewayToInternet" : {
       "DependsOn" : ["VPC", "InternetGateway"],
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
       }
    },

    "PublicRouteTable" : {
      "DependsOn" : ["VPC"],
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "PublicRoute" : {
      "DependsOn" : ["PublicRouteTable", "InternetGateway"],
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PublicRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "PublicSubnetRouteTableAssociation" : {
      "DependsOn" : ["PublicSubnet", "PublicRouteTable"],
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },

    "PrivateSubnet01" : {
      "DependsOn" : ["VPC"],
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "AvailabilityZone": { "Ref" : "PrivateZone01" },
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Private01", "CIDR" ]},
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Private" },
          { "Key" : "Name", "Value" : "Subnet01" }
        ]
      }
    },

    "PrivateSubnet02" : {
      "DependsOn" : ["VPC"],
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "AvailabilityZone": { "Ref" : "PrivateZone02" },
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Private02", "CIDR" ]},
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Private" },
          { "Key" : "Name", "Value" : "Subnet02" }
        ]
      }
    },

    "PrivateSubnet03" : {
      "DependsOn" : ["VPC"],
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "AvailabilityZone": { "Ref" : "PrivateZone03" },
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Private03", "CIDR" ]},
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Private" },
          { "Key" : "Name", "Value" : "Subnet03" }
        ]
      }
    },

    "PrivateRouteTable" : {
      "DependsOn" : ["VPC"],
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Private" }
        ]
      }
    },

    "PrivateSubnet01RouteTableAssociation" : {
      "DependsOn" : ["PrivateSubnet01", "PrivateRouteTable"],
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet01" },
        "RouteTableId" : { "Ref" : "PrivateRouteTable" }
      }
    },

    "PrivateSubnet02RouteTableAssociation" : {
      "DependsOn" : ["PrivateSubnet02", "PrivateRouteTable"],
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet02" },
        "RouteTableId" : { "Ref" : "PrivateRouteTable" }
      }
    },

    "PrivateSubnet03RouteTableAssociation" : {
      "DependsOn" : ["PrivateSubnet03", "PrivateRouteTable"],
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet03" },
        "RouteTableId" : { "Ref" : "PrivateRouteTable" }
      }
    },

    "NatSecurityGroup" : {
      "DependsOn" : ["VPC"],
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "NAT Security Group",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22","CidrIp" : {"Ref" : "AllowSSHFrom"}}
        ],
        "Tags" : [
          { "Key" : "Name", "Value" : "NAT Security Group" }
        ]
      }
    },

    "NatSecurityGroupIngress1" : {
      "DependsOn" : ["NatSecurityGroup"],
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "NatSecurityGroup" },
        "IpProtocol": "icmp",
        "FromPort": "-1",
        "ToPort": "-1",
        "SourceSecurityGroupId": { "Ref": "NatSecurityGroup" }
      }
    },

    "NatSecurityGroupIngress22" : {
      "DependsOn" : ["NatSecurityGroup"],
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "NatSecurityGroup" },
        "IpProtocol": "tcp",
        "FromPort": "22",
        "ToPort": "22",
        "SourceSecurityGroupId": { "Ref": "NatSecurityGroup" }
      }
    },

    "NatSecurityGroupIngress80" : {
      "DependsOn" : ["NatSecurityGroup"],
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "NatSecurityGroup" },
        "IpProtocol": "tcp",
        "FromPort": "80",
        "ToPort": "80",
        "SourceSecurityGroupId": { "Ref": "NatSecurityGroup" }
      }
    },

    "NatSecurityGroupIngress443" : {
      "DependsOn" : ["NatSecurityGroup"],
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "NatSecurityGroup" },
        "IpProtocol": "tcp",
        "FromPort": "443",
        "ToPort": "443",
        "SourceSecurityGroupId": { "Ref": "NatSecurityGroup" }
      }
    },

    "NAT" : {
      "DependsOn" : ["PublicSubnet", "NatSecurityGroup"],
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "InstanceType" : "t2.micro",
        "KeyName"  : { "Ref" : "KeyPairName" },
        "SourceDestCheck" : "false",
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "NatAMI" ]},
        "NetworkInterfaces" : [{
          "GroupSet"                 : [{ "Ref" : "NatSecurityGroup" }],
          "AssociatePublicIpAddress" : "true",
          "DeviceIndex"              : "0",
          "DeleteOnTermination"      : "true",
          "SubnetId"                 : { "Ref" : "PublicSubnet" }
        }],
        "Tags" : [
          { "Key" : "Name", "Value" : "NAT" }
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash\n",
          "yum update -y && yum install -y yum-cron && chkconfig yum-cron on"
        ]]}}
      }
    },

    "PrivateRoute" : {
      "DependsOn" : ["PrivateRouteTable", "NAT"],
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PrivateRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "InstanceId" : { "Ref" : "NAT" }
      }
    },

    "EtcdSecurityGroup": {
      "DependsOn" : ["VPC"],
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Etcd Security Group",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress": [
          {"IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": {"Ref": "AllowSSHFrom"}}
        ],
        "Tags" : [
          { "Key" : "Name", "Value" : "Etcd Security Group" }
        ]
      }
    },

    "Ingress2379": {
      "DependsOn" : ["EtcdSecurityGroup"],
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "EtcdSecurityGroup" },
        "IpProtocol": "tcp", "FromPort": "2379", "ToPort": "2379",
        "SourceSecurityGroupId": { "Ref": "EtcdSecurityGroup" }
      }
    },

    "Ingress2380": {
      "DependsOn" : ["EtcdSecurityGroup"],
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "EtcdSecurityGroup" },
        "IpProtocol": "tcp", "FromPort": "2380", "ToPort": "2380",
        "SourceSecurityGroupId": { "Ref": "EtcdSecurityGroup" }
      }
    },

    "cliROrole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "CLIROAccess",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:Describe*"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "autoscaling:Describe*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ],
        "Path": "/"
      }
    },
    "CLIROAccessProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "cliROrole"
          }
        ]
      }
    },

    "EtcdServerAutoScale": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": [{ "Ref" : "PrivateSubnet01" }, { "Ref" : "PrivateSubnet02" }, { "Ref" : "PrivateSubnet03" }],
        "LaunchConfigurationName": {"Ref": "EtcdServerLaunchConfig"},
        "MinSize": "3",
        "MaxSize": "9",
        "DesiredCapacity": {"Ref": "EtcdClusterSize"},
        "Tags": [
            {"Key": "Name", "Value": "etcd Node", "PropagateAtLaunch": true}
        ]
      }
    },

    "EtcdServerLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "CoreosStableAMI" ]},
        "InstanceType": {"Ref": "EtcdInstanceType"},
        "KeyName": {"Ref": "KeyPairName"},
        "SecurityGroups": [{"Ref": "EtcdSecurityGroup"}],
        "IamInstanceProfile": {"Ref": "CLIROAccessProfile"},
        "UserData" : { "Fn::Base64":
          { "Fn::Join": [ "", [
            "#cloud-config\n\n",
            "coreos:\n",
            "  etcd2:\n",
            "    advertise-client-urls: http://$", { "Ref": "AdvertisedIPAddress" }, "_ipv4:2379\n",
            "    initial-advertise-peer-urls: http://$", { "Ref": "AdvertisedIPAddress" }, "_ipv4:2380\n",
            "    listen-client-urls: http://0.0.0.0:2379\n",
            "    listen-peer-urls: http://$", { "Ref": "AdvertisedIPAddress" }, "_ipv4:2380\n",
            "  units:\n",
            "    - name: etcd2.service\n",
            "      command: stop\n",
            "    - name: etcd-peers.service\n",
            "      command: start\n",
            "      content: |\n",
            "        [Unit]\n",
            "        Description=Write a file with the etcd peers that we should bootstrap to\n",
            "        [Service]\n",
            "        Restart=on-failure\n",
            "        RestartSec=10\n",
            "        ExecStartPre=/usr/bin/docker pull monsanto/etcd-aws-cluster:latest\n",
            "        ExecStartPre=/usr/bin/docker run --rm=true -v /etc/sysconfig/:/etc/sysconfig/ monsanto/etcd-aws-cluster:latest\n",
            "        ExecStart=/usr/bin/systemctl start etcd2\n",
            "    - name: fleet.service\n",
            "      command: start\n",
            "write_files:\n",
            "  - path: /etc/systemd/system/etcd2.service.d/30-etcd_peers.conf\n",
            "    permissions: 0644\n",
            "    content: |\n",
            "      [Service]\n",
            "      # Load the other hosts in the etcd leader autoscaling group from file\n",
            "      EnvironmentFile=/etc/sysconfig/etcd-peers\n"
            ] ]
          }
        }
      }
    },

    "CoreOSServerAutoScale": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": [{ "Ref" : "PrivateSubnet01" }, { "Ref" : "PrivateSubnet02" }, { "Ref" : "PrivateSubnet03" }],
        "LaunchConfigurationName": {"Ref": "CoreOSServerLaunchConfig"},
        "MinSize": "3",
        "MaxSize": "40",
        "DesiredCapacity": {"Ref": "CoreOSClusterSize"},
        "Tags": [
            {"Key": "Name", "Value": "CoreOS Worker", "PropagateAtLaunch": true}
        ]
      }
    },

    "CoreOSServerLaunchConfig": {
      "DependsOn": ["DBInstance"],
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "CoreosStableAMI" ]},
        "InstanceType": {"Ref": "CoreOSInstanceType"},
        "KeyName": {"Ref": "KeyPairName"},
        "SecurityGroups": [{"Ref": "EtcdSecurityGroup"}],
        "UserData" : { "Fn::Base64":
          { "Fn::Join": [ "", [
            "#cloud-config\n\n",
            "coreos:\n",
            "  etcd2:\n",
            "    proxy: on\n",
            "    listen-client-urls: http://localhost:2379\n",
            "    initial-cluster: replaceME=http://10.10.64.1:2380\n",
            "  fleet:\n",
            "    etcd_servers: http://localhost:2379\n",
            "  locksmith:\n",
            "    etcd_servers: http://localhost:2379\n",
            "  units:\n",
            "    - name: etcd2.service\n",
            "      command: start\n",
            "    - name: fleet.service\n",
            "      command: start\n"
            "write_files:\n",
            "  - path: /etc/rds_database\n",
            "    permissions: 0644\n",
            "    content: |\n",
            "      RDS_DATABASE=postgres://", { "GetAtt": { "Ref": "DBInstance" }, "Endpoint.Address" }, ":",
                   { "GetAtt": { "Ref": "DBInstance" }, "Endpoint.Port" },
                   "/", { "Ref": "RDSDBName" },"\n",
            ] ]
          }
        }
      }
    },
    "RDSDBSubnetGroup" : {
      "Type" : "AWS::RDS::DBSubnetGroup",
      "Properties" : {
        "DBSubnetGroupDescription" : "Subnets available for the RDS DB Instance",
        "SubnetIds" :  [ { "Ref" : "PrivateSubnet01" },{ "Ref" : "PrivateSubnet02" },{ "Ref" : "PrivateSubnet03" }]
      }
    },
    "DBInstance" : {
       "DependsOn": ["RDSDBSubnetGroup"],
       "Type": "AWS::RDS::DBInstance",
       "Properties": {
          "DBName"            : { "Ref" : "RDSDBName" },
          "Engine"            : { "Ref" : "RDSDBEngine" },
          "MultiAZ"           : { "Ref" : "RDSDBMultiAZDatabase" },
          "MasterUsername"    : { "Ref" : "RDSDBUsername" },
          "DBInstanceClass"   : { "Ref" : "RDSDBClass" },
          "DBSubnetGroupName" : { "Ref" : "RDSDBSubnetGroup" },
          "AllocatedStorage"  : { "Ref" : "RDSDBAllocatedStorage" },
          "MasterUserPassword": { "Ref" : "RDSDBPassword" }
       }
    }
  }
}
