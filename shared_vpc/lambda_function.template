{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Lambda function to query a stacks output.",
  
  "Parameters": {
    
    "LambdaExecutionRoleArn": {
      "Description": "ARN of lambda execution role arn:aws:iam:*:*:role/name",
      "Type": "String",
      "MinLength" : 1,
      "MaxLength" : 255,
      "Default" : "arn:aws:iam:*:*:role/name"
    }
  },
  "Resources": {
  
    "LookupStackOutputs": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": { "Ref" : "LambdaExecutionRoleArn" },
        "Code": {
          "ZipFile":  { "Fn::Join": ["\n", [
            "var response = require('cfn-response');",
            "exports.handler = function(event, context) {",
            "    console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));",
            "    if (event.RequestType == 'Delete') {",
            "        response.send(event, context, response.SUCCESS);",
            "        return;",
            "    }",
            "    var stackName = event.ResourceProperties.StackName;",
            "    var responseData = {};",
            "    if (stackName) {",
            "        var aws = require('aws-sdk');",
            "        var cfn = new aws.CloudFormation();",
            "        cfn.describeStacks({StackName: stackName}, function(err, data) {",
            "            if (err) {",
            "                responseData = {Error: 'DescribeStacks call failed'};",
            "                console.log(responseData.Error + ':\\n', err);",
            "                response.send(event, context, response.FAILED, responseData);",
            "            }",
            "            else {",
            "                data.Stacks[0].Outputs.forEach(function(output) {",
            "                    responseData[output.OutputKey] = output.OutputValue;",
            "                });",
            "                response.send(event, context, response.SUCCESS, responseData);",
            "            }",
            "        });",
            "    } else {",
            "        responseData = {Error: 'Stack name not specified'};",
            "        console.log(responseData.Error);",
            "        response.send(event, context, response.FAILED, responseData);",
            "    }",
            "};"
          ]]}
        },        
        "Runtime": "nodejs",
        "Timeout": "30"
      }
    }
  },
  "Outputs" : {
    "FunctionArn" : {
        "Value" : { "Fn::GetAtt" : ["LookupStackOutputs", "Arn"] }
    }
  }
}
