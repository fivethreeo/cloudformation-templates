{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "CoreOS instance in a existing VPC using a existing RDS database based on their stack outputs",
  "Mappings" : {
      "RegionMap" : {
          "eu-central-1" : {
              "AMI" : "ami-02211b1f"
          },
          "ap-northeast-1" : {
              "AMI" : "ami-22d27b22"
          },
          "sa-east-1" : {
              "AMI" : "ami-45a62a58"
          },
          "ap-southeast-2" : {
              "AMI" : "ami-2b2e6911"
          },
          "ap-southeast-1" : {
              "AMI" : "ami-0ef1f15c"
          },
          "us-east-1" : {
              "AMI" : "ami-6b1cd400"
          },
          "us-west-2" : {
              "AMI" : "ami-f5a5a5c5"
          },
          "us-west-1" : {
              "AMI" : "ami-bf8477fb"
          },
          "eu-west-1" : {
              "AMI" : "ami-50f4b927"
          }
      }
  },
  "Parameters": {
    "InstanceType" : {
      "Description" : "EC2 HVM instance type.",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "g2.2xlarge",
        "g2.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "d2.xlarge",
        "d2.2xlarge",
        "d2.4xlarge",
        "d2.8xlarge"
       ],
      "ConstraintDescription" : "Must be a valid EC2 HVM instance type."
    },
    "AdvertisedIPAddress": {
      "Description": "Use 'private' if your etcd cluster is within one region or 'public' if it spans regions or cloud providers.",
      "Default": "private",
      "AllowedValues": ["private", "public"],
      "Type": "String"
    },
    "DiscoveryURL": {
      "Description": "An unique etcd cluster discovery URL. Grab a new token from https://discovery.etcd.io/new?size=<your cluster size>",
      "Type": "String"
    },
    "AllowSSHFrom": {
      "Description": "The net block (CIDR) that SSH is available to.",
      "Default": "0.0.0.0/0",
      "Type": "String"
    },
    "KeyPair" : {
      "Description" : "The name of an EC2 Key Pair to allow SSH access to the instance.",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    
    "LambdaFunctionArn": {
      "Description": "ARN of lambda functiom arn:aws:iam:*:*:lambda/name",
      "Type": "String",
      "MinLength" : 1,
      "MaxLength" : 255,
      "Default" : "arn:aws:iam:*:*:lambda/name"
    },
    
    "DatabaseStackName": {
      "Description": "Name of an active CloudFormation stack that contains the database resources.",
      "Type": "String",
      "MinLength" : 1,
      "MaxLength" : 255,
      "Default" : "SampleDatabaseStackName"
    },
    
    "VPCStackname": {
      "Description": "Name of an active CloudFormation stack that contains the VPC resources.",
      "Type": "String",
      "MinLength" : 1,
      "MaxLength" : 255,
      "Default" : "SampleVPCStackName"
    }
  },

  "Resources": {
  
    "CoreOSServerLaunchConfig": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "InstanceType": {"Ref": "InstanceType"},
        "KeyName": {"Ref": "KeyPair"},
        "SubnetId": { "Fn::GetAtt" : ["VPCInfo", "Subnet1"] },
        "UserData" : { "Fn::Base64":
          { "Fn::Join": [ "", [
            "#cloud-config\n\n",
            "coreos:\n",
            "  units:\n",
            "    - name: docker-redis.service",
            "      command: start",
            "      content: |",
            "        [Unit]",
            "        Description=Redis container",  { "Fn::GetAtt" : ["DatabaseInfo", "EndpointAddress"] },  ":", { "Fn::GetAtt" : ["DatabaseInfo", "EndpointAddress"] },
            "        Author=Me",
            "        After=docker.service",
            "    ",
            "        [Service]",
            "        Restart=always",
            "        ExecStart=/usr/bin/docker start -a redis_server",
            "        ExecStop=/usr/bin/docker stop -t 2 redis_server"
            ] ]
          }
        }
      }
    },
    

    "VPCInfo": {
      "Type": "Custom::DatabaseInfo",
      "Properties": {
        "ServiceToken":  { "Ref" : "LambdaFunctionArn" },
        "StackName": {
          "Ref": "VPCStackname"
        }
      }
    },
    

    "DatabaseInfo": {
      "Type": "Custom::DatabaseInfo",
      "Properties": {
        "ServiceToken":  { "Ref" : "LambdaFunctionArn" },
        "StackName": {
          "Ref": "DatabaseStackName"
        }
      }
    }
  }
}
